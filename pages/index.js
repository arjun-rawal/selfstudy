import Head from "next/head";
import styles from "@/styles/Home.module.css";
import NewTopic from "./newTopic.js";
import { Button, Heading } from "@chakra-ui/react";
import { useState } from "react";
import AuthScreen from "./authScreen.js";
import authMiddleware from "./api/auth/checkAuth.js";
import { useEffect } from "react";
import cookie from "cookie";
import { parse } from "cookie";
import FloatingCards from "../myComponents/FloatingCards.js";
import Dashboard from "./dashboard.js";

export async function getServerSideProps(context) {
  const { req } = context;

  try {
    // Parse cookies from the request headers
    const cookies = req.headers.cookie ? parse(req.headers.cookie) : {};
    const sessionToken = cookies.sessionToken;

    console.log("Session token from cookies:", sessionToken);

    if (!sessionToken) {
      console.log("No session token found in cookies");
      return { props: { user: null } };
    }

    // Authenticate the session token
    const user = await authMiddleware({ cookies });

    console.log("User from authMiddleware:", user);

    return {
      props: { user: user || null }, // Always return props
    };
  } catch (error) {
    console.error("Authentication error:", error.message);
    return {
      props: { user: null }, // Ensure props is always defined
    };
  }
}

async function getPlan(username) {
  if (!username) {
    console.error("No username provided");
    return null;
  }

  // Make a POST request to the checkPlan API
  const res = await fetch("/api/checkPlan", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ username }),
  });

  if (!res.ok) {
    console.error("Failed to fetch plan:", await res.text());
    return null;
  }

  const data = await res.json();
  return data;
}
export default function Home({ user }) {
  const [topic, setTopic] = useState("");

  const [plan, setPlan] = useState();
  useEffect(() => {
    async function fetchData() {
      if (user) {
        const result = await getPlan(user.username);

        if (result.planExists) {
          setTopic(result.result.topic || "No topic found");
          setPlan(result.result);
        }
      }
    }
    fetchData();
  }, [user]);

  console.log(user);
  const [auth, setAuth] = useState(!!user); //!! makes it false if its null
  async function handleLogout() {
    try {
      const res = await fetch("/api/auth/logout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (res.ok) {
        window.location.reload();
      }
    } catch (error) {
      console.error("Error logging out:", error);
    }
  }
  const Page = () => {
    if (auth) {
      return (
        <>
          <Button
            position={"absolute"}
            left={"90vw"}
            top={"5vh"}
            transform={"translate(0%,0%)"}
            onClick={() => {
              handleLogout();
            }}
          >
            Log out
          </Button>
          <Dashboard user={user} />
        </>
      );
    }
    return <AuthScreen />;
  };

  return (
    <>
      <Head>
        <script
          async
          src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2478846957520898"
          crossOrigin="anonymous"
        ></script>
        <title>SelfStudy App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Heading
          textAlign={"center"}
          position={"absolute"}
          left={"50vw"}
          top={"5vh"}
          transform={"translate(-50%)"}
          size="3xl"
        >
          SelfStudy
        </Heading>
        <p>{topic}</p>
        <Page />
        <FloatingCards />
      </main>
    </>
  );
}
